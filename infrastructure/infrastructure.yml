Description: >
    SabreenSalama / capstone-project


Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR: 
    Description: vpc for kubernetes
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 10.0.0.0/24

  
  DestinationCidrBlock:
      Description: routing Role
      Type: String
      Default: 0.0.0.0/0

      


Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access

  VPC: 
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
        Tags: 
            - Key: Name 
              Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
        Tags:
            - Key: Name
              Value: !Ref EnvironmentName
            
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
       InternetGatewayId: !Ref InternetGateway
       VpcId: !Ref VPC  

  PublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags: 
            - Key: Name 
              Value: "public subnet"

  
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: "public route table"



  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  E8KnodeSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "E8K scurity group"
      VpcId: !Ref VPC
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: TCP
          ToPort: 65535
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: TCP
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: TCP
          ToPort: 65535

  E8KInstance:
    Type: AWS::EC2::Instance
    Properties: 
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
              echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
              sudo apt-get update
              sudo apt-get install -y kubectl
              kubectl version --client

      ImageId: ami-003634241a8fcdec0 
      InstanceType: t2.medium
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref E8KnodeSG
      Tags: 
        - Key: Name
          Value: "E8K NODE"




 


 
Outputs:
  masternode:
    Description: A reference to the masterec2
    Value: !Ref E8KInstance
    Export:
      Name: masternode

  


 